name: app-engine

env:
  GCLOUD_PROJECT_ID: kvaapagarrot
  NODE_ENV: production
  APP_VERSION: "${GITHUB_ACTOR//[\[\]]/}-${GITHUB_SHA:0:7}"

on:
  push:
    branches:
      - main-kampf
  pull_request:
    branches:
      - main-kampf
    types: [opened, synchronize, reopened]

jobs:

  cancel-previous:
    name: Cancel Previous Jobs
    # Skip workflow entirely for [skip ci] commits
    if: |
      false == contains(github.event.commits[0].message, '[skip ci]') &&
      false == contains(github.event.commits[0].message, '[no ci]')
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.7.0
        with:
          access_token: ${{ github.token }}

  lint:
    name: Lint Code
    # Skip workflow entirely for [skip ci] commits
    if: |
      false == contains(github.event.commits[0].message, '[skip ci]') &&
      false == contains(github.event.commits[0].message, '[no ci]')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            yarn-${{ runner.os }}-
            yarn-

      - name: Run linters
        run: |
          yarn install --production=false --frozen-lockfile --non-interactive
          yarn lint
          yarn slint

  deploy-gae:
    name: App Engine Deployment
    # Skip workflow entirely for [skip ci] commits
    if: |
      false == contains(github.event.commits[0].message, '[skip ci]') &&
      false == contains(github.event.commits[0].message, '[no ci]')
    runs-on: ubuntu-latest
    needs: [lint]
    # Map a step output to a job output
    outputs:
      version-url: ${{ steps.version-url.outputs.url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            yarn-${{ runner.os }}-
            yarn-

      - name: Generate static route handlers
        run: |
          yarn install --production=false --frozen-lockfile --non-interactive
          yarn build-frontend
          yarn static

      - name: Build backend and cleanup for deploy
        run: |
          yarn build
          rm -rf node_modules
          yarn install --production --frozen-lockfile --non-interactive

      - name: Import Service Account key
        run: echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" | base64 -d > /tmp/auth.json

      - name: GCloud Auth
        run: |
          gcloud --quiet auth \
          activate-service-account "${{ secrets.GCP_SA_EMAIL }}" \
          --key-file=/tmp/auth.json \
          --project="${GCLOUD_PROJECT_ID}"

      - name: Deploy
        run: |
          gcloud --quiet app deploy app.yaml --no-promote --version "${APP_VERSION}"

      - id: version-url
        name: Get deployed app version URL
        run: |
          VERSION_URL=$(gcloud app versions describe "${APP_VERSION}" --service=default --format "value(versionUrl)")
          echo $VERSION_URL
          echo "::set-output name=url::$(echo $VERSION_URL)"

  lighthouse:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    # Run only after successful deployment
    needs: [deploy-gae]
    env:
      LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}

    steps:
      - name: Set Lighthouse CI config
        run: |
          curl "https://raw.githubusercontent.com/irkfap/kvaapagarrot.com/${GITHUB_SHA}/lighthouserc.json" \
          --silent --location --output "$GITHUB_WORKSPACE/lighthouserc.json"

      - name: Audit URLs using Lighthouse
        uses: treosh/lighthouse-ci-action@v3
        with:
          urls: |
            ${{needs.deploy-gae.outputs.version-url}}
          uploadArtifacts: true # save results as an action artifacts
          temporaryPublicStorage: true # upload lighthouse report to the temporary storage
          configPath: ${{ github.workspace }}/lighthouserc.json

  production:
    name: Update Production
    runs-on: ubuntu-latest
    # Run only after successful deployment and Lighthouse audit
    needs: [deploy-gae, lighthouse]
    # Run only on push to master
    if: ${{ success() && github.ref == 'refs/heads/main-kampf' }}

    steps:
      - name: Import Service Account key
        run: echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" | base64 -d > /tmp/auth.json

      - name: GCloud Auth
        run: |
          gcloud --quiet auth \
          activate-service-account "${{ secrets.GCP_SA_EMAIL }}" \
          --key-file=/tmp/auth.json \
          --project="${GCLOUD_PROJECT_ID}"

      - name: Promote deployed version to production
        run: |
          gcloud --quiet app versions migrate "${APP_VERSION}" --service=default
